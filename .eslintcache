[{"D:\\test_poc\\react\\DemoReact\\src\\index.js":"1","D:\\test_poc\\react\\DemoReact\\src\\redux\\subject\\reducer.js":"2","D:\\test_poc\\react\\DemoReact\\src\\pages\\Student\\List.jsx":"3","D:\\test_poc\\react\\DemoReact\\src\\services\\student.service.js":"4","D:\\test_poc\\react\\DemoReact\\src\\pages\\Dashboard\\Index.jsx":"5","D:\\test_poc\\react\\DemoReact\\src\\redux\\subject\\type.js":"6","D:\\test_poc\\react\\DemoReact\\src\\services\\teacher.server.js":"7","D:\\test_poc\\react\\DemoReact\\src\\pages\\Student\\AddEdit.jsx":"8","D:\\test_poc\\react\\DemoReact\\src\\pages\\Teacher\\AddEdit.jsx":"9","D:\\test_poc\\react\\DemoReact\\src\\pages\\Teacher\\Detail.jsx":"10","D:\\test_poc\\react\\DemoReact\\src\\pages\\Student\\Detail.jsx":"11","D:\\test_poc\\react\\DemoReact\\src\\redux\\student\\reducer.js":"12","D:\\test_poc\\react\\DemoReact\\src\\common\\Header\\Index.jsx":"13"},{"size":410,"mtime":1608466691965,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1608467612675,"results":"16","hashOfConfig":"15"},{"size":3999,"mtime":1608370273351,"results":"17","hashOfConfig":"15"},{"size":1285,"mtime":1608370273365,"results":"18","hashOfConfig":"15"},{"size":156,"mtime":1608370273347,"results":"19","hashOfConfig":"15"},{"size":57,"mtime":1608370273361,"results":"20","hashOfConfig":"15"},{"size":509,"mtime":1608370273368,"results":"21","hashOfConfig":"15"},{"size":6621,"mtime":1608467267532,"results":"22","hashOfConfig":"15"},{"size":4123,"mtime":1608466933342,"results":"23","hashOfConfig":"15"},{"size":7800,"mtime":1608467306025,"results":"24","hashOfConfig":"15"},{"size":4567,"mtime":1608467163397,"results":"25","hashOfConfig":"15"},{"size":857,"mtime":1608467650217,"results":"26","hashOfConfig":"15"},{"size":142,"mtime":1608370273343,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cjzu20",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\test_poc\\react\\DemoReact\\src\\index.js",[],"D:\\test_poc\\react\\DemoReact\\src\\redux\\subject\\reducer.js",[],"D:\\test_poc\\react\\DemoReact\\src\\pages\\Student\\List.jsx",["58"],"D:\\test_poc\\react\\DemoReact\\src\\services\\student.service.js",[],"D:\\test_poc\\react\\DemoReact\\src\\pages\\Dashboard\\Index.jsx",[],["59","60"],"D:\\test_poc\\react\\DemoReact\\src\\redux\\subject\\type.js",[],"D:\\test_poc\\react\\DemoReact\\src\\services\\teacher.server.js",[],"D:\\test_poc\\react\\DemoReact\\src\\pages\\Student\\AddEdit.jsx",["61"],"D:\\test_poc\\react\\DemoReact\\src\\pages\\Teacher\\AddEdit.jsx",["62","63","64","65","66","67","68","69"],"import React, { useState } from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport { Formik } from 'formik';\r\nimport * as _ from 'lodash';\r\nimport * as Yup from 'yup';\r\nimport {\r\n  Avatar,\r\n  Checkbox,\r\n  Container,\r\n  CssBaseline,\r\n  FormControlLabel,\r\n  Grid,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { teacherAction } from '../../redux/teacher/action';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center'\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main\r\n  },\r\n  form: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(1)\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2)\r\n  }\r\n}));\r\n\r\nconst AddEdit = ({ history }) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const teachers = useSelector((state) => state.teacher.teachers);\r\n\r\n  const addTeacher = (teacherName) => {\r\n    let newTeacher = {\r\n      id: 0,\r\n      name: teacherName,\r\n      subject: []\r\n    };\r\n    if (teachers && teachers.length) {\r\n      newTeacher.id = teachers[teachers.length - 1].id + 1;\r\n    }\r\n    dispatch(teacherAction.addTeacher(newTeacher));\r\n    history.push('/teacher');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container>\r\n        <Grid item>\r\n          <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n              <Avatar className={classes.avatar}>\r\n                <PersonIcon />\r\n              </Avatar>\r\n              <Typography component=\"h1\" variant=\"h5\">\r\n                Add Teacher\r\n              </Typography>\r\n              <Formik\r\n                initialValues={{ name: '' }}\r\n                onSubmit={(values, { setSubmitting }) => {\r\n                  setSubmitting(true);\r\n                  addTeacher(values.name);\r\n                  console.log(values);\r\n                }}\r\n                validationSchema={Yup.object().shape({\r\n                  name: Yup.string().required('Required')\r\n                })}\r\n              >\r\n                {(props) => {\r\n                  const {\r\n                    values,\r\n                    touched,\r\n                    errors,\r\n                    dirty,\r\n                    isSubmitting,\r\n                    handleChange,\r\n                    handleBlur,\r\n                    handleSubmit,\r\n                    handleReset\r\n                  } = props;\r\n                  return (\r\n                    <form\r\n                      className={classes.form}\r\n                      noValidate\r\n                      onSubmit={handleSubmit}\r\n                    >\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"name\"\r\n                        label=\"Name\"\r\n                        name=\"name\"\r\n                        autoComplete=\"Name\"\r\n                        value={values.name}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        helperText={errors.name && touched.name && errors.name}\r\n                        autoFocus\r\n                      />\r\n                      <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                      >\r\n                        Save\r\n                      </Button>\r\n                    </form>\r\n                  );\r\n                }}\r\n              </Formik>\r\n            </div>\r\n          </Container>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddEdit;\r\n","D:\\test_poc\\react\\DemoReact\\src\\pages\\Teacher\\Detail.jsx",["70","71","72","73"],"import {\r\n  Button,\r\n  Container,\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  makeStyles,\r\n  Paper,\r\n  Select,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport { Formik } from 'formik';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { useParams } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\n\r\nimport { studentAction } from '../../redux/student/action';\r\nimport { subjectAction } from '../../redux/subject/action';\r\nimport { teacherAction } from '../../redux/teacher/action';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nconst Detail = () => {\r\n  let { id } = useParams();\r\n  const dispatch = useDispatch();\r\n  let teacher = {};\r\n  let students = [];\r\n  let subjects = [];\r\n\r\n  teacher = useSelector((state) => {\r\n    if (!state.teacher?.teachers ?? true) return null;\r\n    const storeTeacher = state.teacher.teachers.find((x) => x.id == id);\r\n    if (!storeTeacher) return null;\r\n\r\n    return storeTeacher;\r\n  });\r\n\r\n  students = useSelector((state) => state.student?.students ?? []);\r\n  subjects = useSelector((state) => state.subject?.subjects ?? []);\r\n\r\n  const initDispatch = () => {\r\n    dispatch(teacherAction.getAllTeacher());\r\n    dispatch(studentAction.getAllStudent());\r\n    dispatch(subjectAction.getAllSubject());\r\n  };\r\n\r\n  useEffect(() => initDispatch(), []);\r\n\r\n  return (\r\n    <>\r\n      {teacher ? (\r\n        <TeacherListDetail\r\n          teacher={teacher}\r\n          students={students}\r\n          subjects={subjects}\r\n        />\r\n      ) : (\r\n        <p>Teacher not found</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst TeacherListDetail = ({ teacher, students, subjects }) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [teacherSubject, setTeacherSubject] = useState([]);\r\n\r\n  const getSubjectName = (subjectId) => {\r\n    const subject = subjects.find((x) => x.id == subjectId);\r\n    return subject ? subject.name : 'No Subject Found';\r\n  };\r\n\r\n  const getSubjectStudents = (subjectId) => {\r\n    const subjectStudents = students.filter((x) =>\r\n      x.subject.find((y) => y === subjectId)\r\n    );\r\n\r\n    return subjectStudents\r\n      ? subjectStudents.map((row, i) => {\r\n          return (\r\n            <Typography key={i}>\r\n              <Link to={`/student/${row.id}`}>{row.name}</Link>\r\n            </Typography>\r\n          );\r\n        })\r\n      : 'No student found';\r\n  };\r\n\r\n  const updateTeacherSubject = () => {\r\n    if (!teacher?.subject ?? true) {\r\n      setTeacherSubject([]);\r\n    } else {\r\n      setTeacherSubject(\r\n        subjects.filter((x) => !teacher.subject.includes(x.id))\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateTeacherSubject();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Container maxWidth={false}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h4\" gutterBottom>\r\n              Teacher Detail\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TableContainer component={Paper}>\r\n              <Table aria-label=\"simple table\">\r\n                <TableBody>\r\n                  <TableRow>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      Name\r\n                    </TableCell>\r\n                    <TableCell align=\"left\">{teacher.name}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      Student Info\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <TableContainer component={Paper}>\r\n                        <Table>\r\n                          <TableHead>\r\n                            <TableRow>\r\n                              <TableCell>Subject</TableCell>\r\n                              <TableCell>Students</TableCell>\r\n                            </TableRow>\r\n                          </TableHead>\r\n                          <TableBody>\r\n                            {teacher.subject.map((row, i) => (\r\n                              <TableRow key={i}>\r\n                                <TableCell>{getSubjectName(row)}</TableCell>\r\n                                <TableCell>{getSubjectStudents(row)}</TableCell>\r\n                              </TableRow>\r\n                            ))}\r\n                          </TableBody>\r\n                        </Table>\r\n                      </TableContainer>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={1}>\r\n          <Container component=\"main\" maxWidth=\"xs\">\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h4\" gutterBottom>\r\n                Add subject\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              {teacherSubject && teacherSubject.length ? (\r\n                <Formik\r\n                  initialValues={{ subject: '' }}\r\n                  onSubmit={(values, { setSubmitting, resetForm }) => {\r\n                    setSubmitting(true);\r\n                    dispatch(\r\n                      teacherAction.addSubject({\r\n                        teacherId: teacher.id,\r\n                        subjectId: +values.subject\r\n                      })\r\n                    );\r\n                    updateTeacherSubject();\r\n                    resetForm({ values: '' });\r\n                  }}\r\n                  validationSchema={Yup.object().shape({\r\n                    subject: Yup.string().required('Required')\r\n                  })}\r\n                >\r\n                  {(props) => {\r\n                    const {\r\n                      values,\r\n                      handleChange,\r\n                      handleSubmit,\r\n                      handleReset\r\n                    } = props;\r\n                    return (\r\n                      <form onSubmit={handleSubmit}>\r\n                        <FormControl className={classes.formControl}>\r\n                          <InputLabel htmlFor=\"subject-native-simple\">\r\n                            Subject\r\n                          </InputLabel>\r\n                          <Select\r\n                            native\r\n                            name=\"subject\"\r\n                            value={values.subject}\r\n                            onChange={handleChange}\r\n                          >\r\n                            <option aria-label=\"None\" value=\"\" />\r\n                            {teacherSubject.map((row, i) => (\r\n                              <option key={i} value={row.id}>\r\n                                {row.name}\r\n                              </option>\r\n                            ))}\r\n                          </Select>\r\n                        </FormControl>\r\n                        <br />\r\n                        <Button\r\n                          type=\"button\"\r\n                          className=\"outline\"\r\n                          onClick={handleReset}\r\n                        >\r\n                          Reset\r\n                        </Button>\r\n                        <Button type=\"submit\">Submit</Button>\r\n                      </form>\r\n                    );\r\n                  }}\r\n                </Formik>\r\n              ) : (\r\n                <p>No subject found</p>\r\n              )}\r\n            </Grid>\r\n          </Container>\r\n        </Grid>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Detail;\r\n","D:\\test_poc\\react\\DemoReact\\src\\pages\\Student\\Detail.jsx",["74"],"import {\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Typography\r\n} from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport { subjectAction } from '../../redux/subject/action';\r\nimport { teacherAction } from '../../redux/teacher/action';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650\r\n  }\r\n});\r\n\r\nconst Detail = ({ match }) => {\r\n  let { id } = useParams();\r\n  const dispatch = useDispatch();\r\n  let student = {};\r\n  let teachers = [];\r\n  let subjects = [];\r\n\r\n  student = useSelector((state) => {\r\n    if (!state.student?.students ?? true) {\r\n      return null;\r\n    }\r\n    var student = state.student.students.find((x) => x.id === id);\r\n    if (!student) return null;\r\n\r\n    return student;\r\n  });\r\n\r\n  teachers = useSelector((state) => state.teacher?.teachers ?? []);\r\n  subjects = useSelector((state) => state.subject?.subjects ?? []);\r\n\r\n  const initDispatch = () => {\r\n    dispatch(teacherAction.getAllTeacher());\r\n    dispatch(subjectAction.getAllSubject());\r\n  };\r\n\r\n  useEffect(() => {\r\n    initDispatch();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Paper elevation={1}>\r\n        {student ? (\r\n          <StudentDeail\r\n            student={student}\r\n            teachers={teachers}\r\n            subjects={subjects}\r\n          />\r\n        ) : (\r\n          <EmptyStudentDetail />\r\n        )}\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nconst StudentDeail = ({ student, teachers, subjects }) => {\r\n  const classes = useStyles();\r\n\r\n  const getTeacherName = (subjectId) => {\r\n    const teacher = teachers.find((x) =>\r\n      x.subject.find((y) => y === subjectId)\r\n    );\r\n    if (subjectId === 0) {\r\n      debugger;\r\n    }\r\n    return teacher ? teacher.name : 'Teacher Not Found.';\r\n  };\r\n\r\n  const getSubjectName = (subjectId) => {\r\n    const subject = subjects.find((x) => x.id === subjectId);\r\n    return subject ? subject.name : 'Subject Not Found.';\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container maxWidth={false}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h4\" gutterBottom>\r\n              Student Detail\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TableContainer component={Paper}>\r\n              <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableBody>\r\n                  <TableRow>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      Name\r\n                    </TableCell>\r\n                    <TableCell align=\"left\">{student.name}</TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      Teachers Info\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <TableContainer component={Paper}>\r\n                        <Table>\r\n                          <TableHead>\r\n                            <TableRow>\r\n                              <TableCell>Subject</TableCell>\r\n                              <TableCell>Teacher</TableCell>\r\n                            </TableRow>\r\n                          </TableHead>\r\n                          <TableBody>\r\n                            {student.subject.map((row, i) => (\r\n                              <TableRow key={i}>\r\n                                <TableCell>{getSubjectName(row)}</TableCell>\r\n                                <TableCell>{getTeacherName(row)}</TableCell>\r\n                              </TableRow>\r\n                            ))}\r\n                          </TableBody>\r\n                        </Table>\r\n                      </TableContainer>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nconst EmptyStudentDetail = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableBody>\r\n          <TableRow>\r\n            <TableCell component=\"th\" scope=\"row\" align=\"center\">\r\n              <p>No student found.</p>\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default Detail;\r\n","D:\\test_poc\\react\\DemoReact\\src\\redux\\student\\reducer.js",[],"D:\\test_poc\\react\\DemoReact\\src\\common\\Header\\Index.jsx",[],{"ruleId":"75","severity":1,"message":"76","line":38,"column":66,"nodeType":"77","endLine":38,"endColumn":68,"suggestions":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"75","severity":1,"message":"83","line":58,"column":60,"nodeType":"77","endLine":58,"endColumn":62,"suggestions":"84"},{"ruleId":"85","severity":1,"message":"86","line":1,"column":17,"nodeType":"87","messageId":"88","endLine":1,"endColumn":25},{"ruleId":"85","severity":1,"message":"89","line":2,"column":22,"nodeType":"87","messageId":"88","endLine":2,"endColumn":32},{"ruleId":"85","severity":1,"message":"90","line":7,"column":13,"nodeType":"87","messageId":"88","endLine":7,"endColumn":14},{"ruleId":"85","severity":1,"message":"91","line":11,"column":3,"nodeType":"87","messageId":"88","endLine":11,"endColumn":11},{"ruleId":"85","severity":1,"message":"92","line":14,"column":3,"nodeType":"87","messageId":"88","endLine":14,"endColumn":19},{"ruleId":"85","severity":1,"message":"93","line":88,"column":21,"nodeType":"87","messageId":"88","endLine":88,"endColumn":26},{"ruleId":"85","severity":1,"message":"94","line":89,"column":21,"nodeType":"87","messageId":"88","endLine":89,"endColumn":33},{"ruleId":"85","severity":1,"message":"95","line":93,"column":21,"nodeType":"87","messageId":"88","endLine":93,"endColumn":32},{"ruleId":"96","severity":1,"message":"97","line":48,"column":66,"nodeType":"98","messageId":"99","endLine":48,"endColumn":68},{"ruleId":"75","severity":1,"message":"100","line":63,"column":35,"nodeType":"77","endLine":63,"endColumn":37,"suggestions":"101"},{"ruleId":"96","severity":1,"message":"97","line":86,"column":47,"nodeType":"98","messageId":"99","endLine":86,"endColumn":49},{"ruleId":"75","severity":1,"message":"102","line":118,"column":6,"nodeType":"77","endLine":118,"endColumn":8,"suggestions":"103"},{"ruleId":"75","severity":1,"message":"100","line":53,"column":6,"nodeType":"77","endLine":53,"endColumn":8,"suggestions":"104"},"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["105"],"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["108"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'withStyles' is defined but never used.","'_' is defined but never used.","'Checkbox' is defined but never used.","'FormControlLabel' is defined but never used.","'dirty' is assigned a value but never used.","'isSubmitting' is assigned a value but never used.","'handleReset' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'initDispatch'. Either include it or remove the dependency array.",["109"],"React Hook useEffect has a missing dependency: 'updateTeacherSubject'. Either include it or remove the dependency array.",["110"],["111"],{"desc":"112","fix":"113"},"no-global-assign","no-unsafe-negation",{"desc":"112","fix":"114"},{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"115","fix":"119"},"Update the dependencies array to be: [dispatch]",{"range":"120","text":"121"},{"range":"122","text":"121"},"Update the dependencies array to be: [initDispatch]",{"range":"123","text":"124"},"Update the dependencies array to be: [updateTeacherSubject]",{"range":"125","text":"126"},{"range":"127","text":"124"},[1212,1214],"[dispatch]",[1370,1372],[1618,1620],"[initDispatch]",[2969,2971],"[updateTeacherSubject]",[1256,1258]]